{"name":"Jython-burp-api","body":"jython-burp-api (burpy)\r\n=======================\r\n\r\nBurpy is an ISC Licensed library, written in Jython, Java and Python.\r\n\r\nBurpy exposes a Jython interface to the popular Burp Suite web security \r\ntesting tool, as an alternative to [Buby](http://tduehr.github.com/buby/) \r\nfor those testers who prefer Python over Ruby.\r\n\r\nFeatures\r\n--------\r\nBy default, we monitor a list of registered menu items for any changes.\r\nIf a file has changed (i.e., it's last modification time was updated), the\r\nAPI will automatically attempt to reload it. This is great for active\r\ndevelopment and debugging of Burp extensions.\r\n\r\n\r\nExamples\r\n--------\r\nTo start an interactive console, simply pass the -i command line argument\r\nwhen starting Burp.  You can also click one or multiple items in Burp and\r\nassign them to the `items` local variable like so:\r\n\r\n    $ java -cp java/src/:jython.jar:burpsuite_pro_v1.07.jar burp.StartBurp -i\r\n    ... launching Jython/Burp interpeter ...\r\n\r\n    >>> Burp\r\n    <BurpExtender 0x2>\r\n    >>> Burp.getProxyHistory()\r\n    [<HttpRequest [/]>, ...\r\n\r\n    >>> items\r\n    [<HttpRequest [/firefox/headlines.xml]>]\r\n    >>> items[0].headers\r\n    {'Accept-Language': 'en-us,en;q=0.5', ...\r\n    >>> items[0].response\r\n    <HttpResponse [302]>\r\n    >>> len(items[0].response)\r\n    256\r\n\r\nand many more!\r\n\r\n\r\nAdding a simple menu item\r\n-------------------------\r\nCheck out the [ConsoleMenu](https://github.com/mwielgoszewski/jython-burp-api/blob/master/Lib/gds/burp/menu/console.py)\r\nclass for an example of how to add menu item's to Burp's context menu.\r\nBelow is an example of how to use one in your code.\r\n\r\n    from gds.burp.menu.base import MenuItem\r\n    \r\n    class MyMenuItem(MenuItem):\r\n        CAPTION = 'my caption'\r\n\r\n        def __init__(self, _burp):\r\n            MenuItem.__init__(self, _burp)\r\n\r\n        @staticmethod\r\n        def menuItemClicked(self, menuItemCaption, messageInfo):\r\n            print('clicked %s' % (menuItemCaption,))\r\n\r\n\r\nTo add your new menu (MyMenuItem) to Burp's context menu, we need to pass a\r\nreference of the BurpExtender object to MyMenuItem's `__init__` constructor.\r\nFor example, in BurpExtender class, we register the ConsoleMenu within the\r\nregisterExtenderCallbacks method (passing self as a reference):\r\n\r\n\r\n    if self.opt.interactive:\r\n        ConsoleMenu(self)\r\n\r\n\r\nNote that when we defined the menuItemClicked method within MyMenuItem, we\r\nannotated it with `@staticmethod`. This allows for the plugin monitor to\r\nhot-swap out our method on the registered menu item without having to\r\nre-initiaize it. If you plan on loading and initializing your menu item from\r\nthe interactive interpreter session, do not use @staticmethod. Once initialized\r\nthe new menu item should be available in Burp:\r\n\r\n\r\n\t>>> class MyMenuItem(MenuItem):\r\n\t...     CAPTION = 'my caption'\r\n\t...     def __init__(self, _burp):\r\n\t...         MenuItem.__init__(self, _burp)\r\n\t...     def menuItemClicked(self, menuItemCaption, messageInfo):\r\n\t...         print('clicked %s' % (menuItemCaption,))\r\n\t... \r\n\t>>> MyMenuItem(Burp)\r\n\r\n\r\nDependencies\r\n------------\r\n- [Burp Suite](http://portswigger.net/burp/download.html) (free or professional)\r\n- [Jython 2.5+](http://www.jython.org/downloads.html)\r\n\r\n\r\nInstallation / Running\r\n----------------------\r\n1. Install [Jython 2.5+](http://www.jython.org/downloads.html) - I prefer the standalone jar option\r\n2. `git clone git://github.com/mwielgoszewski/jython-burp-api.git`\r\n3. `cd jython-burp-api/`\r\n4. Copy Burp Suite jar file(s) into current directory\r\n5. Compile BurpExtender files:\r\n\r\n    `$ javac -cp burpsuite_v1.4.01.jar:jython.jar java/src/*.java`\r\n\r\n6. Start Burp by adding jython, burp extender and burp onto CLASSPATH:\r\n\r\n    `$ java -cp java/src/:jython.jar:burpsuite_v1.4.01.jar burp.StartBurp -i`\r\n\r\n\r\n**Note:** If Jython is _outside_ the current directory (assuming you followed the instructions\r\nand you're in jython-burp-api/), you'll need to add Lib/ onto your Java classpath like \r\nso (ht Jon Passki, thanks!):\r\n\r\n    $ java -cp Lib:java/src:/path/to/jython.jar:burp.jar burp.StartBurp -i\r\n\r\n\r\nContribute\r\n----------\r\n1. Check for open issues or open a fresh issue to start a discussion around\r\na feature idea or a bug.\r\n2. Fork the repository on Github to start making your changes in a separate branch.\r\n3. Write a test which shows that the bug was fixed or that the feature works as expected.\r\n4. Send a pull request and bug the maintainer until it gets merged and published. :)\r\n\r\n","google":"","tagline":"Develop Burp extensions in Jython","note":"Don't delete this file! It's used internally to help with page regeneration."}